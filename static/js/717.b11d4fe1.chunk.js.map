{"version":3,"file":"static/js/717.b11d4fe1.chunk.js","mappings":"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","sources":["Components/EditEntireResume/ExperienceEditor.jsx","../node_modules/@mui/icons-material/AddCircleOutline.js","../node_modules/@mui/icons-material/RemoveCircleOutline.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport TextareaAutosize from \"@mui/material/TextareaAutosize\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { withStyles } from \"@mui/styles\";\r\nimport styles from \"./styles\";\r\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\r\nimport RemoveCircleOutlineIcon from \"@mui/icons-material/RemoveCircleOutline\";\r\nimport Divider from \"@mui/material/Divider\";\r\nconst ExperienceEditor = ({ classes, experience, onSave }) => {\r\n  const [isAddExperienceEnabled, setIsAddExperienceEnabled] = useState(false);\r\n\r\n  const handleChange = (index, name, value) => {\r\n    const updatedExperience = [...experience];\r\n    updatedExperience[index] = { ...updatedExperience[index], [name]: value };\r\n    onSave(updatedExperience);\r\n  };\r\n  const handlePointsChange = (index, pointIndex, value) => {\r\n    const updatedExperience = [...experience];\r\n    updatedExperience[index].points[pointIndex] = value;\r\n    onSave(updatedExperience);\r\n  };\r\n  const handleAddPoint = (index) => {\r\n    const updatedExperience = [...experience];\r\n    updatedExperience[index].points.push(\"\");\r\n    onSave(updatedExperience);\r\n  };\r\n\r\n  const handleRemovePoint = (index, pointIndex) => {\r\n    const updatedExperience = [...experience];\r\n    updatedExperience[index].points.splice(pointIndex, 1);\r\n    onSave(updatedExperience);\r\n  };\r\n\r\n  const handleAddExperience = () => {\r\n    const updatedExperience = [\r\n      {\r\n        companyName: \"\",\r\n        role: \"\",\r\n        location: \"\",\r\n        date: \"\",\r\n        points: [],\r\n      },\r\n      ...experience,\r\n    ];\r\n    onSave(updatedExperience);\r\n  };\r\n  useEffect(() => {\r\n    const allFieldsFilled = experience.every(\r\n      (currExperiences) =>\r\n        currExperiences.companyName.trim() !== \"\" &&\r\n        currExperiences.role.trim() !== \"\" &&\r\n        currExperiences.location.trim() !== \"\" &&\r\n        currExperiences.date.trim() !== \"\" &&\r\n        currExperiences.points.every((point) => point.trim() !== \"\")\r\n    );\r\n    setIsAddExperienceEnabled(allFieldsFilled);\r\n  }, [experience]);\r\n  return (\r\n    <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n      <Grid item xs={12}>\r\n        <Grid\r\n          container\r\n          spacing={1}\r\n          alignItems={\"center\"}\r\n          justifyContent={\"space-between\"}\r\n        >\r\n          <Grid item>\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              gutterBottom\r\n              className={classes.editResumeHeader}\r\n            >\r\n              Experience\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              className={classes.buttonView}\r\n              disabled={!isAddExperienceEnabled}\r\n              onClick={handleAddExperience}\r\n            >\r\n              <AddCircleOutlineIcon\r\n                color=\"primary\"\r\n                className={classes.addButtonStyles}\r\n              />\r\n              Add New Experience\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={11}>\r\n        <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n          {experience.map((exp, index) => (\r\n            <Grid item xs={12} key={index}>\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item xs={12}>\r\n                  <Typography\r\n                    variant=\"subtitle1\"\r\n                    className={classes.iteratorTitle}\r\n                  >\r\n                    Experience {index + 1}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Grid\r\n                    container\r\n                    spacing={2}\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Company Name\"\r\n                        value={exp.companyName}\r\n                        onChange={(e) =>\r\n                          handleChange(index, \"companyName\", e.target.value)\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Role\"\r\n                        value={exp.role}\r\n                        onChange={(e) =>\r\n                          handleChange(index, \"role\", e.target.value)\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Location\"\r\n                        value={exp.location}\r\n                        onChange={(e) =>\r\n                          handleChange(index, \"location\", e.target.value)\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Date\"\r\n                        value={exp.date}\r\n                        onChange={(e) =>\r\n                          handleChange(index, \"date\", e.target.value)\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <Grid container>\r\n                        <Grid item xs={12}>\r\n                          <Typography variant=\"subtitle2\">Points</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          {exp.points.map((point, pointIndex) => (\r\n                            <Grid\r\n                              container\r\n                              spacing={1}\r\n                              key={pointIndex}\r\n                              justifyContent=\"space-between\"\r\n                              alignItems=\"center\"\r\n                            >\r\n                              <Grid item xs={10} sm={10} md={11} lg={11}>\r\n                                <TextareaAutosize\r\n                                  minRows={2}\r\n                                  placeholder={`Point ${pointIndex + 1}`}\r\n                                  value={point}\r\n                                  onChange={(e) =>\r\n                                    handlePointsChange(\r\n                                      index,\r\n                                      pointIndex,\r\n                                      e.target.value\r\n                                    )\r\n                                  }\r\n                                  className={classes.pointsAutoSize}\r\n                                />\r\n                              </Grid>\r\n                              <Grid item>\r\n                                <Button\r\n                                  className={classes.buttonView}\r\n                                  onClick={() =>\r\n                                    handleRemovePoint(index, pointIndex)\r\n                                  }\r\n                                >\r\n                                  <RemoveCircleOutlineIcon\r\n                                    color=\"primary\"\r\n                                    className={classes.removeButtonStyles}\r\n                                  />\r\n                                </Button>\r\n                              </Grid>\r\n                            </Grid>\r\n                          ))}\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <Grid container justifyContent=\"center\">\r\n                            <Grid item>\r\n                              <Button\r\n                                className={classes.buttonView}\r\n                                onClick={() => handleAddPoint(index)}\r\n                              >\r\n                                <AddCircleOutlineIcon\r\n                                  color=\"primary\"\r\n                                  className={classes.addButtonStyles}\r\n                                />{\" \"}\r\n                                Add Points\r\n                              </Button>\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider className={classes.divider} />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ExperienceEditor);\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8\"\n}), 'AddCircleOutline');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M7 11v2h10v-2zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8\"\n}), 'RemoveCircleOutline');"],"names":["withStyles","styles","_ref","classes","experience","onSave","isAddExperienceEnabled","setIsAddExperienceEnabled","useState","handleChange","index","name","value","updatedExperience","useEffect","allFieldsFilled","every","currExperiences","companyName","trim","role","location","date","points","point","_jsxs","Grid","container","spacing","justifyContent","alignItems","children","_jsx","item","xs","Typography","variant","gutterBottom","className","editResumeHeader","Button","buttonView","disabled","onClick","handleAddExperience","AddCircleOutlineIcon","color","addButtonStyles","map","exp","iteratorTitle","sm","TextField","fullWidth","label","onChange","e","target","pointIndex","md","lg","TextareaAutosize","minRows","placeholder","handlePointsChange","pointsAutoSize","handleRemovePoint","splice","RemoveCircleOutlineIcon","removeButtonStyles","push","handleAddPoint","Divider","divider","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}